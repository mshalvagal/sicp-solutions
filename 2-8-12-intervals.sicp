(define (make-interval a b)
  (if (> a b)
      (cons b a)
      (cons a b)))
(define lower-bound car)
(define upper-bound cdr)

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
                 (- (upper-bound x) (lower-bound y))))

(define (mul-interval x y)
  (let ((l1 (lower-bound x))
        (u1 (upper-bound x))
        (l2 (lower-bound y))
        (u2 (upper-bound y)))
    (cond ((and (< l1 0) (> u1 0) (> l2 0))
           (make-interval (* l1 u2)
                          (* u1 u2)))
          ((and (< l1 0) (> u1 0) (< u2 0))
           (make-interval (* u1 l2)
                          (* l1 l2)))
          ((and (< l2 0) (> u2 0) (> l1 0))
           (make-interval (* l2 u1)
                          (* u2 u1)))
          ((and (< l2 0) (> u2 0) (< u1 0))
           (make-interval (* u2 l1)
                          (* l2 l1)))
          ((and (< l1 0) (> u1 0) (< l2 0) (> u2 0))
           (let ((p1 (* l1 l2))
                 (p2 (* l1 u2))
                 (p3 (* u1 l2))
                 (p4 (* u1 u2)))
             (make-interval (min p1 p2 p3 p4)
                            (max p1 p2 p3 p4))))
          ((and (> l1 0) (> l2 0))
           (make-interval (* l1 l2)
                          (* u1 u2)))
          ((and (< u1 0) (< u2 0))
           (make-interval (* u1 u2)
                          (* l1 l2)))
          ((and (< u1 0) (> l2 0))
           (make-interval (* l1 u2)
                          (* u1 l2)))
          ((and (< u2 0) (> l1 0))
           (make-interval (* l2 u1)
                          (* u2 l1))))))

(define (div-interval x y)
  (let ((l2 (lower-bound y))
        (u2 (upper-bound y)))
    (if (and (< l2 0) (> u2 0))
        (error "Denominator interval crossing zero.")
        (mul-interval x (make-interval (/ 1.0 u2)
                                       (/ 1.0 l2))))))


(define (make-center-width c w)
  (make-interval (+ c w) (- c w)))
(define (center i)
  (/ (+ (upper-bound i) (lower-bound i)) 2))
(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))

(define (make-center-percent c p)
  (let ((w (/ (* c p) 100)))
    (make-center-width c w)))
(define (percent i)
  (* 100 (/ (width i) (center i))))
