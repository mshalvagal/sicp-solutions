#lang sicp
(define (make-table same-key?)
  (define (assoc key records)
    (cond ((null? records) #f)
          ((same-key? key (caar records)) (car records))
          (else (assoc key (cdr records)))))
  (let ((local-table (list '*table*)))
    (define (lookup keylist)
      (define (lookup-iter keys subtable)
        (cond ((null? keys) #f)
              ((null? (cdr subtable)) #f)
              ((null? (cdr keys))
               (let ((record (assoc (car keys) (cdr subtable))))
                 (if record
                     (cdr record)
                     #f)))
              (else (let ((next-subtable (assoc (car keys) (cdr subtable))))
                      (if next-subtable
                          (lookup-iter (cdr keys) next-subtable)
                          #f)))))
      (lookup-iter keylist local-table))
    (define (insert! keylist value)
      (define (insert-iter! keys subtable)
        (cond ((null? keys)
               (error "No keys given for insertion -- TABLE"))
              ((not (pair? (cdr subtable)))
               (if (null? (cdr keys))
                   (set-cdr! subtable
                             (list (cons (car keys)
                                         value)))
                   (let ((new-subtable (list (car keys))))
                     (set-cdr! subtable
                               (list new-subtable))
                     (insert-iter! (cdr keys) new-subtable))))
              ((null? (cdr keys))
               (let ((record (assoc (car keys) (cdr subtable))))
                 (if record
                     (set-cdr! record value)
                     (set-cdr! subtable
                               (cons (cons (car keys) value)
                                     (cdr subtable))))))
              (else (let ((next-subtable (assoc (car keys) (cdr subtable))))
                      (if next-subtable
                          (insert-iter! (cdr keys) next-subtable)
                          (let ((new-subtable (cons (list (car keys))
                                                    (cdr subtable))))
                            (set-cdr! subtable new-subtable)
                            (insert-iter! (cdr keys) (car new-subtable))))))))
      (insert-iter! keylist local-table))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc) insert!)
            (else (error "Unkown operation -- TABLE" m))))
    dispatch))

(define operation-table (make-table eq?))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc))

(put (list 'math '+) 43)
(put (list 'math '-) 45)
(put (list 'math '*) 42)
(put (list 'letters 'a) 97)
(put (list 'letters 'b) 98)

(get (list 'math '*))

(put (list 'math '* 'x) 42)
(get (list 'math '*))