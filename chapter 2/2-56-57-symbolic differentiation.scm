(define (=number? expr num)
  (and (number? expr) (= expr num)))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
(define (append seq1 seq2)
  (accumulate cons seq2 seq1))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        ((sum? a1) (if (sum? a2)
                       (append a1 (cdr a2)))
                       (append a1 (list a2)))
        ((sum? a2) (append (list '+ a1) (cdr a2)))
        (else (list '+ a1 a2))))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        ((product? m1) (if (product? m2)
                           (append m1 (cdr m2))
                           (append m1 (list m2))))
        ((product? m2) (append (list '* m1) (cdr m2)))
        (else (list '* m1 m2))))

(define (make-exponentiation x n)
  (cond ((=number? n 0) 1)
        ((=number? n 1) x)
        ((and (number? x) (number? n)) (expt x n))
        (else (list '** x n))))

(define (variable? x) (symbol? x))

(define (same-variable? x1 x2)
  (and (variable? x1) (variable? x2) (eq? x1 x2)))

(define (sum? x)
  (and (pair? x) (eq? '+ (car x))))
(define (addend x) (cadr x))
(define (augend x) 
  (if (null? (cdddr x))
      (caddr x)
      (cons '+ (cddr x))))

(define (product? x)
  (and (pair? x) (eq? '* (car x))))
(define (multiplier x) (cadr x))
(define (multiplicand x) 
  (if (null? (cdddr x))
      (caddr x)
      (cons '* (cddr x))))

(define (exponentiation? x)
  (and (pair? x) (eq? '** (car x))))
(define (base x) (cadr x))
(define (exponent x) (caddr x))

(define (deriv expr var)
  (cond ((number? expr) 0)
        ((variable? expr)
         (if (same-variable? expr var) 1 0))
        ((sum? expr)
         (make-sum (deriv (addend expr) var)
                   (deriv (augend expr) var)))
        ((product? expr)
         (make-sum (make-product (multiplier expr)
                                 (deriv (multiplicand expr) var))
                   (make-product (deriv (multiplier expr) var)
                                 (multiplicand expr))))
        ((exponentiation? expr)
         (make-product (exponent expr)
                       (make-product (make-exponentiation (base expr) (make-sum (exponent expr) -1))
                                     (deriv (base expr) var))))
        (else (display "Error - unknown expression"))))

(display (deriv '(+ x 3) 'x)) (newline)
(display (deriv '(* x y) 'x)) (newline)
(display (deriv '(* (* x y) (+ x 3)) 'x)) (newline)
(display (deriv '(** x y) 'x)) (newline)
(newline)
(display (deriv '(+ (** x 2) (* y x) (* 3 x)) 'x)) (newline)
(display (deriv '(* x y (+ x 3)) 'x)) (newline)
